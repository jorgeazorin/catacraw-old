"use strict";

let proxies = [];

/**
 * The crawler
 * @param log
 * @returns {*|promise}
 */
module.exports = function (log) {
    log('Connecting to freeproxylists.com ...');
    const Q = require('q');

    let defer = Q.defer();

    scrape('anonymous', log, function () {
        scrape('elite', log, function () {
            defer.resolve(proxies);
        });
    });

    return defer.promise;
};

function scrape(type, log, cb) {
    const request = require('request');
    const cheerio = require('cheerio');
    const array = require('array-walk');

    request.get(`http://www.freeproxylists.com/${type}.html`, function (err, res) {
        if (typeof err === typeof undefined || err === null) {
            log(`[FreeProxyLists.com] Searching for ${type} lists...`);

            let m = res.body.match(/(anon|elite)\/\d+\.html/gmi);

            array.map(m, function (url, next) {
                log(`[FreeProxyLists.com] Scraping ${url}`);

                request.get(`http://www.freeproxylists.com/${url}`, function (err, res) {
                    if (err === null || typeof err === typeof undefined) {
                        let $ = cheerio.load(res.body);

                        $("#dataID > table > tbody").find('tr').each(function () {
                            if ($(this).html().match(/.*?<th>|colspan.*?/gmi) === null) {
                                let ip = $(this).children().first().text().trim();
                                let port = $(this).children().last().text().trim();

                                proxies.push(`${ip}:${port}`);
                            }
                        });

                        next();
                    }
                });
            }, function () {
                cb();
            });
        } else {
            log(`[FreeProxyLists.com] Error loading ${type} proxies: ${err.code}`);
        }
    });
}
